type Query {
  hotTokens: [Token!]
  tokensTopN(sort: SORTABLE_FIELDS = price, order: ORDER = desc, limit: Int = 20): [Token!]
  tokensToMarket: [TokenToMarket!]
  tokenList(sort: SORTABLE_FIELDS = price, order: ORDER = desc, limit: Int = 20, start: Int = 0): TokenPage
  token(id: String): Token 
}

type Date {
  elapsed: Float #unix time elapsed after 1970-01-01
  tz: String #timezone
}

enum SORTABLE_FIELDS {
  market_cap
  volume_24h
  price
  percent_change_24h
}

enum ORDER {
  desc #descend
  asc #ascend
}

enum CurrencyUnit {
  USD
  RMB
}

type ETHAddress {
  address: String! #TODO: add constraints to address format
}

type Holder {
  position: Int
  address: String
  share: Float
  percentage: Float
}

type DistributionItem {
  owner: String!
  percentage: Float!
}

type ICOInfo {
  startDate: Date
  endDate: Date
  initPrice(unit: CurrencyUnit = USD): Float
  totalRaised(unit: CurrencyUnit = USD): Float
  country: String
  lockPlan: String
  isDestroyable: Boolean
  distribution: [DistributionItem]
}

type ExchangeInfo {
  coinName: String!
  exchangeAddress: String
  exchangeIcon: String
  launchDate: Date
  dayOnePercentage: Float  #first day price +/- percentage
  isBroken: Boolean #ever broken below init price
}

type TransactionInfo {
  price(unit: CurrencyUnit = USD): Float
  amount: Float
}

enum SOCIALMEDIA {
  LINKEDIN
  FACEBOOK
  TWITTER
  TELEGRAM
  WEIBO
}

type SocialLink {
  mediaType: SOCIALMEDIA
  url: String!
}

type TeamMember {
  isFounder: Boolean!
  photo: String
  name: String!
  position: String!
  experience: String
  socialLinks: [SocialLink!]
}


type TeamInfo {
  members: [TeamMember]!
  address: String
  totalMembers: Int
  developers: Int
  developerPercent: Float
  marketingMembers: Int
  marketingMemberPercent: Float
}

type Advisor {
  isVIP: Boolean
  photo: String #url link to photo
  name: String!
  title: String
  socialLinks: [SocialLink!]
}

type AdvisorAllocation {
  district: String!
  number: Int
}

type AdvisorStatistic {
  number: Int
  VIPNumber: Int
  experiencedNumber: Int
  allocation: [AdvisorAllocation!]
}

type AdvisorInfo {
  advisors: [Advisor!]!
  statiscs: AdvisorStatistic
}

type Investor {
  name: String!
  icon: String
  url: String
  isVIP: Boolean

}

type InvestorInfo {
  investors: [Investor!]!
  investorNum: Int
  bigInvestorNum: Int
}

type SociaMedia {
  name: String!
  subscribers: Int!
  activities: Int
}

type SearchIndex {
  indexer: String!
  last7Days: Float
  last30Days: Float
  trendSnapShot: String #trends snapshot image url
}

type ProjectInfo {
  url: String
  whitePaper: String
  name: String #company/funds name
  registration: String
  address: String
  contact: String
}

enum PLATFORM {
  IOS,
  ANDROID,
  GENERIC
}

type DApp {
  platform: PLATFORM
  downloadAddress: String
  updatedAt: Date
}

type GithubInfo { #github 
  link: String! #github address
  hasPublicRepos: Boolean!
  hasOfficialDevDoc: Boolean
  urlOfDevDoc: String
  publicRepos: Int
  #below information retrieved from Github Service
  last7DaysCommit: Int
  last30DaysCommit: Int
  contributors: Int
  fork:Int
  star:Int
  watch:Int
}

#Token
# Basic entity in tokenpedia
type Token {
  id: ID!
  name: String! #cms
  abbrev: String #cms
  chineseName: String #cms
  icon: String #url string of icon, optional #cms
  description: String #cms
  category: String
  totalSupply: Float
  circulateSupply: Float
  contractAddress: ETHAddress!
  holders: Float #Holder account number  #bigdata
  transactions: Float #bigdata
  isListed: Boolean! #Listed in public exchange  
  marketCap(unit: CurrencyUnit = USD): Float#!may overfloat, bignumber needed, also UNIT needed
  currentPrice(unit: CurrencyUnit = USD): Float #price
  currentPercentage: Float
  maxPrice(unit: CurrencyUnit = USD): Float #?
  minPrice(unit: CurrencyUnit = USD): Float #?
  topHolders: [Holder!] 
  icoInfo: [ICOInfo] #cms
  exchangeInfo: [ExchangeInfo] 
  transactionInfo: [TransactionInfo]
  teamInfo: TeamInfo #cms
  advisorInfo: AdvisorInfo  #cms
  investorInfo: InvestorInfo #cms
  socialMedias: [SociaMedia] #cms
  searchIndex: [SearchIndex] #???
  projectInfo: ProjectInfo  #cms
  dappInfo: [DApp] #cms
  githubInfo: GithubInfo
}

#token not go to market yet
type TokenToMarket {
  id: ID!
  name: String!
  icon: String
  estToMarket: Date
}

type TokenPage {
  tokens: [Token]!
  currentPage: Int!
  pageSize: Int!
  totalPage: Int!
  totalTokens: Int!
  currentTokens: Int!
}





